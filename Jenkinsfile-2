pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS=credentials("dockerhub")
    SONARQUBE_CREDENTIALS=credentials("sonarqube")
    JFROG_CREDENTIALS=credentials("jfrog")
  }

  parameters {
    string(name: "App_Version", description: "provide application version")
  }

  stages {
    stage("checkout code") {
      steps {
        checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/shivagande26/DataStore.git']])
      }
    }
    stage("building application") {
      steps {
        sh """
          echo "-------- Building Application --------"
          mvn clean package
          echo "------- Application Built Successfully --------"
        """
      }
    }
    stage("executing testcases") {
      steps {
        sh """
          echo "-------- Executing Testcases --------"
          mvn test
          echo "-------- Testcases Execution Complete --------"
        """
      }
    }
    stage("static code analisys") {
      steps{
        script {
          def SonarQubecredentialsId = 'sonarqube'
            staticCodeAnalysis(SonarQubecredentialsId)
          }
        }
    }
    stage("pushing artifacts to jfrog") {
      steps {
        sh """
          echo "-------- Pushing Artifacts To Jfrog --------"
          curl -X PUT -u $JFROG_CREDENTIALS_USR:$JFROG_CREDENTIALS_PSW -T ./target/datastore-*.jar http://13.232.114.237:8082/artifactory/DataStore/
          echo "-------- Pushed Artifacts To Jfrog --------"
        """
      }
    }
    stage("building docker image") {
      steps {
        sh """
          echo "-------- Building Docker Image --------"
          docker build -t datastore:"${App_Version}" .
          echo "-------- Image Successfully Built --------"
        """
      }
    }
    stage("docker image scan") {
      steps {
        sh """
          echo "-------- Scanning Docker Image --------"
          trivy image datastore:"${App_Version}"
          echo "-------- Scanning Docker Image Complete --------"
        """
      }
    }
    stage("tagging docker image") {
      steps {
        sh """
          echo "-------- Tagging Docker Image --------"
          docker tag datastore:"${App_Version}" 8072388539/datastore:"${App_Version}"
          echo "-------- Docker Image Tagged Successfully --------"
        """
      }
    }
    stage("logging in to dockerhub and pushing image") {
      steps {
        sh """
          echo "-------- Logging To DockerHub --------"
          docker login -u $DOCKERHUB_CREDENTIALS_USR --password $DOCKERHUB_CREDENTIALS_PSW
          echo "-------- DockerHub Login Successful --------"

          echo "-------- Pushing Docker Image To DockerHub --------"
          docker push 8072388539/datastore:"${App_Version}"
          echo "-------- Docker Image Pushed Successfully --------"
        """
      }
    }
    stage("cleanup") {
      steps {
        sh """
           echo "-------- Cleaning Up Jenkins Machine --------"
           docker image prune -a -f
           echo "-------- Clean Up Successful --------"
        """
      }
    }
    stage("acceptance") {
      steps {
        input 'Trigger Down Stream Job'
      }
    }
    stage("triggering deployment job") {
      steps {
        build job: "KubernetesDeployment", parameters: [string(name: "App_Name", value: "datastore-deploy"), string(name: "App_Version", value: "${params.App_Version}")]
      }
    }
  }
}

def staticCodeAnalysis(credentialsId) {
  withSonarQubeEnv(credentialsId: credentialsId) {
    sh 'mvn sonar:sonar'
  }
}